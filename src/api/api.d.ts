
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

class ApiTSHandlersCallbacks<T> {
    Then?(res: T, thisArg?: this): void;
    Catch?(error?: string, thisArg?: this): void;
    Finally?(res?: T, thisArg?: this): void;
}
class IDictApi<K, V>{
  Key: K;
  Value: V;
}




class LoginPermission{
  Name: string;
  SubId: number;
}

class PermissionInfo{
  Name: string;
  HasSubId: boolean;
}

class web_HistoryMasterGet_Result{
  ID: number;
  TypeID: number;
  LoginID: number;
  DateCreated: Date;
  MessageType?: number;
  MessageText1: string;
  MessageText2: string;
  Value1?: number;
  Value2?: number;
  LibraryID?: number;
  ItemID?: number;
  DateValue?: Date;
  LibraryRegionID?: number;
}

class Devices_Table{
  ID: number;
  DateCreated: Date;
  Name: string;
  CFG1: number[];
  CFG2: number[];
}

class Device_Table_Data{
  ID: number;
  DeviceID: number;
  DateValue: Date;
  HourValue: number;
  OK_Count: number;
  Err_Count: number;
  Read_Count: number;
  Online_Count: number;
}


interface ApiTS {
  timeout: number;
  ontimeout(): (method: string) => void;
  onerror(): (error: Error, method: string, params: object, xhr: XMLHttpRequest) => void;
  debug: boolean,
  debugExcludes: {},
  onUnauth(): (method: string)=> void;
  call<T>(promise: Promise<T>, handlers: ApiTSHandlersCallbacks<T>): Promise<T>;
  remote_call_promise<T>(method: string, params: object, isStream: boolean) : Promise<T>;
    //call<T>(promise: Promise<T>, handlers?: HandlersCallbacks<T>) : Promise<T>;

   // Meter_Incoming_Get(LibraryID: number, MeterID: number, Handlers?: ApiTSHandlersCallbacks<Meter_DTO[]>) : Promise<Meter_DTO[]>;

  Login(Login:string, Pass:string, Handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean>;
  LogOff( Handlers?: ApiTSHandlersCallbacks<boolean>): Promise<boolean>;
  ChangePass(NewPass:string, Handlers?: ApiTSHandlersCallbacks<string>): Promise<string>;
  NewLogin(NewLogin:string, NewPass:string, Handlers?: ApiTSHandlersCallbacks<string>): Promise<string>;
  ChangeLoginPass(Login:string, NewPass:string, Handlers?: ApiTSHandlersCallbacks<string>): Promise<string>;
  GetLoginPermissions(Login:string, Handlers?: ApiTSHandlersCallbacks<LoginPermission[]>): Promise<LoginPermission[]>;
  DelLoginPermission(Login:string, permission:LoginPermission, Handlers?: ApiTSHandlersCallbacks<string>): Promise<string>;
  AddLoginPermission(Login:string, permission:LoginPermission, Handlers?: ApiTSHandlersCallbacks<string>): Promise<string>;
  GetAllPermissionsTypes( Handlers?: ApiTSHandlersCallbacks<PermissionInfo[]>): Promise<PermissionInfo[]>;
  Index( Handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob>;
  StaticContent(content:string, Handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob>;
  StaticContent2(content2:string, Handlers?: ApiTSHandlersCallbacks<Blob>): Promise<Blob>;
  Cache_GetMasterHistoryLast(LastID:number, Handlers?: ApiTSHandlersCallbacks<web_HistoryMasterGet_Result[]>): Promise<web_HistoryMasterGet_Result[]>;
  Devisces_Get(DeviceID:number, Handlers?: ApiTSHandlersCallbacks<Devices_Table[]>): Promise<Devices_Table[]>;
  Devisces_Data_Get(DeviceID:number, Handlers?: ApiTSHandlersCallbacks<Device_Table_Data[]>): Promise<Device_Table_Data[]>;
}

